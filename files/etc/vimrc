" Configure default file encoding
set fileencodings=ucs-bom,utf-8,latin1

" Don't wake up system with blinking cursor
let &guicursor = &guicursor . ",a:blinkon0"

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
endif

" Prevent the cursor from moving when exiting INSERT mode
let CursorColumnI = 0 "the cursor column position in INSERT
autocmd InsertEnter * let CursorColumnI = col('.')
autocmd CursorMovedI * let CursorColumnI = col('.')
autocmd InsertLeave * if col('.') != CursorColumnI | call cursor(0, col('.')+1) | endif

" Sanity checks: make Vim perform more like a modern editor
set nocompatible " Ensure that we're running in Vi Improved mode.
set ruler " Show the cursor position all the time
set number " Show line numbers in left gutter
set viminfo='20,\"50 " read/write a .viminfo file, don't store more than 50 lines of registers
set nowrap " Do not visually line-wrap text
set backspace=2 " Backspaces over indent, eol, and start
set history=100 " Keep the last 100 commands. Vim default is 20, vi default is 0, and RHEL system default is 50.
set autoindent " Will autoindent the next line
set ignorecase " Allow case insensitive searching. Use \c to make search case sensitive again.

" Tab management
set expandtab " Use spaces instead of tab characters
set tabstop=4 " Set number of columns a tab will cover visually
set softtabstop=4 " Set number of columns for tab when in insert mode
set shiftwidth=4 " Set number of columns < or > will indent text

" New windows open below or to the right
set splitbelow
set splitright

" Navigate Vim windows with
" just CTRL + direction key
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Easily reposition windows 
map <leader>Wl <C-w>L " Move window far right
map <leader>Wh <C-w>H " Move window far left 
map <leader>Wj <C-w>J " Move window to bottom
map <leader>Wk <C-w>K " Move window to top
map <leader>Wr <C-w>R " Rotate window UP or LEFT

" Quickly resize splits
map <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
map <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>
